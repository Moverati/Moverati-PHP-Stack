<?php
/**
 * Core Action
 *
 * LICENSE
 *
 * This file is intellectual property of Core Action, LLC and may not
 * be used without permission.
 *
 * @category  Engine
 * @copyright Copyright (c) 2010 Core Action. (http://coreaction.com/)
 */

namespace Core\Engine\Payment;

/**
 * Test class for Transaction.
 * Generated by PHPUnit on 2010-10-29 at 16:49:58.
 */
class TransactionTest extends \PHPUnit_Framework_TestCase {
    public function testSetOptionsViaConstructor() {
        $contact = new Transaction\Contact();
        $address = new Transaction\Address();
        $cc = new Transaction\PaymentMethod\CreditCard();

        $transaction = new Transaction(array(
            'currency'        => Transaction::CURRENCY_USD,
            'invoiceId'       => '123',
            'description'     => 'Lorem Ipsum Dolor Sit Amet',
            'customerContact' => $contact,
            'customerAddress' => $address,
            'shippingContact' => $contact,
            'shippingAddress' => $address,
            'subtotal'        => 10.00,
            'shipping'        => 10.00,
            'handling'        => 10.00,
            'tax'             => 10.00,
            'paymentMethod'   => $cc,
            'vendorOptions'   => array('vendor' => array('option' => 'value')),
        ));

        $this->assertEquals(Transaction::CURRENCY_USD, $transaction->getCurrency(), 'Assert currency set properly');
        $this->assertEquals('123', $transaction->getInvoiceId(), 'Assert transaction id set properly');
        $this->assertEquals('Lorem Ipsum Dolor Sit Amet', $transaction->getDescription(), 'Assert description set properly');
        $this->assertEquals($contact, $transaction->getCustomerContact(), 'Assert customer contact set properly');
        $this->assertEquals($address, $transaction->getCustomerAddress(), 'Assert customer address set properly');
        $this->assertEquals($contact, $transaction->getShippingContact(), 'Assert shipping contact set properly');
        $this->assertEquals($address, $transaction->getShippingAddress(), 'Assert shipping address set properly');
        $this->assertEquals(10.00, $transaction->getSubTotal(), 'Assert subtotal set properly');
        $this->assertEquals(10.00, $transaction->getShipping(), 'Assert shipping set properly');
        $this->assertEquals(10.00, $transaction->getHandling(), 'Assert handling set properly');
        $this->assertEquals(10.00, $transaction->getTax(), 'Assert tax set properly');
        $this->assertEquals($cc, $transaction->getPaymentMethod(), 'Assert credit card set as payment method');
        $this->assertEquals(array('option' => 'value'), $transaction->getVendorOptions('vendor'), 'Assert vendor options set properly');
    }

    public function testSetInvalidCurrencyThrowsException() {
        $this->setExpectedException(
            'Core\Engine\Payment\Exception',
            'Currency foobar not allowed'
        );

        $transaction = new Transaction();
        $transaction->setCurrency('foobar');
    }

    public function testGetTotalReturnsSum() {
        $transaction = new Transaction();

        $transaction->setSubTotal(10.25)
                    ->setShipping(5.50)
                    ->setHandling(1.25)
                    ->setTax(3.15);

        $this->assertEquals(20.15, $transaction->getTotal(), 'Assert total is the sum of subtotal, shipping, handing, and tax');
    }

    public function testSetAndRetrieveVendorOptions() {
        $transaction = new Transaction();

        $transaction->setVendorOptions(array(
            'foo' => array(),
            'bar' => array(
                'param1' => 'value1',
                'param2' => 'value2',
            ),
            'baz' => array(
                'param3' => 'value3',
            ),
        ));

        $this->assertNull($transaction->getVendorOptions('foo'), 'Assert null returned when no vendor options set');
        $this->assertEquals(array('param1' => 'value1', 'param2' => 'value2'), $transaction->getVendorOptions('bar'), 'Assert all values returned when using ::getVendorOptions');

        $this->assertEquals('value1', $transaction->getVendorOption('bar', 'param1'), 'Assert scalar value returned');
        $this->assertEquals('default', $transaction->getVendorOption('foo', 'dne', 'default'), 'Assert default value used when param does not exist');

        $this->assertTrue($transaction->hasVendorOption('bar', 'param2'), 'Assert ::hasVendorOption returs true when value present');
        $this->assertFalse($transaction->hasVendorOption('foo', 'dne'), 'Assert ::hasVendorOption returns false when value not present');

        $this->assertTrue($transaction->hasVendorOption('baz', 'param3'), 'Assert value present before clearing vendor');
        $transaction->clearVendorOptions('baz');
        $this->assertFalse($transaction->hasVendorOption('baz', 'param3'), 'Assert value not present after clearing vendor');

        $transaction->clearVendorOptions();
        $this->assertFalse($transaction->hasVendorOption('bar', 'param1'), 'Assert values not present after clearing all vendor options');
        $this->assertFalse($transaction->hasVendorOption('bar', 'param2'), 'Assert values not present after clearing all vendor options');
        $this->assertFalse($transaction->hasVendorOption('baz', 'param3'), 'Assert values not present after clearing all vendor options');

    }
}
